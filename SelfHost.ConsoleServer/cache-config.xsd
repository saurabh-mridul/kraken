<?xml version="1.0"?>

<!--
| Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.
|
| Oracle is a registered trademarks of Oracle Corporation and/or its affiliates.
|
| This software is the confidential and proprietary information of
| Oracle Corporation.  You shall not disclose such confidential and
| proprietary information and shall use it only in accordance with the
| terms of the license agreement you entered into with Oracle.
|
| This notice may not be removed or altered.
-->

<!--
This is the XML schema for the Coherence for .NET cache configuration file.
The configuration file's root element should include reference to the schema:

<cache-config xmlns="http://schemas.tangosol.com/cache"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://schemas.tangosol.com/cache
assembly://Coherence/Tangosol.Config/cache-config.xsd">
-->
<xs:schema xmlns="http://schemas.tangosol.com/cache"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           targetNamespace="http://schemas.tangosol.com/cache"
           elementFormDefault="qualified"
           attributeFormDefault="unqualified">

  <!--
  The cache-config element is the root element of the cache-config descriptor.

  Used in: n/a
  -->
  <xs:complexType name="cache-config">
    <xs:sequence>
      <xs:element ref="defaults" minOccurs="0"/>
      <xs:element ref="caching-scheme-mapping"/>
      <xs:element ref="caching-schemes"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="cache-config" type="cache-config"/>

  <!--
  The defaults element defines factory wide default settings.

  Used in: cache-config
  -->
  <xs:element name="defaults">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="serializer" minOccurs="0" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!--
  The caching-scheme-mapping element contains the bindings between the cache
  names and the caching schemes specified for the caches to use.

  Used in: cache-config
  -->
  <xs:complexType name="caching-scheme-mapping">
    <xs:sequence>
      <xs:element ref="cache-mapping" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="caching-scheme-mapping" type="caching-scheme-mapping"/>

  <!--
  The cache-mapping element contains a single binding between a cache name and
  a caching scheme this cache will use. Following cache name patterns are
  supported:
    - exact match, i.e. "MyCache",
    - prefix match, i.e. "My*" that matches to any cache name starting with "My",
    - any match "*", that matches to any cache name.

  The cache-mapping element allows specifying replaceable cache scheme
  parameters by supplying any number of "init-param" elements. During cache
  scheme parsing, any occurence of any replaceable parameter in the format
  "{parameter-name}" is replaced with the corresponding parameter value.

  Consider the following cache mapping example:

    <cache-mapping>
      <cache-name>My*</cache-name>
      <scheme-name>my-scheme</scheme-name>
      <init-params>
      <init-param>
        <param-name>cache-loader</param-name>
        <param-value>com.acme.MyCacheLoader</param-value>
      </init-param>
      <init-param>
        <param-name>size-limit</param-name>
        <param-value>1000</param-value>
      </init-param>
      </init-params>
    </cache-mapping>

  For any matching cache name, any occurence of the literal "{cache-loader}" in
  any part of the corresponding cache-scheme element will be replaced with the
  string "com.acme.MyCacheLoader" and any occurence of the literal "{size-limit}"
  will be replaced with the value of "1000".

  Used in: caching-scheme-mapping
  -->
  <xs:complexType name="cache-mapping">
    <xs:sequence>
      <xs:element ref="cache-name"/>
      <xs:element ref="scheme-name"/>
      <xs:element ref="init-params" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="cache-mapping" type="cache-mapping"/>

  <!--
  The cache-name element specifies the name of the cache.  The name is unique
  within a cache factory.

  Used in: cache-mapping
  -->
  <xs:element name="cache-name" type="xs:string"/>

  <!--
  The scheme-name element contains the scheme name. The name is unique
  within a configuration file.

  Used in: cache-mapping, local-scheme, near-scheme, remote-cache-scheme,
       remote-invocation-scheme
  -->
  <xs:element name="scheme-name" type="xs:string"/>

  <!--
  The init-params element contains class initialization parameter configuration
  info.

  Used in: class-scheme, local-sheme, near-scheme, serializer,
  address-provider
  -->
  <xs:complexType name="init-params">
    <xs:sequence>
      <xs:element ref="init-param" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="init-params" type="init-params"/>

  <!--
  The init-param element contains a single class initialization parameter
  configuration info.

  Used in: init-params
  -->
  <xs:group name="param-name-and-type">
    <xs:sequence>
      <xs:element ref="param-name"/>
      <xs:element ref="param-type" minOccurs="0"/>
    </xs:sequence>
  </xs:group>
  <xs:complexType name="init-param">
    <xs:sequence>
      <xs:choice>
        <xs:group ref="param-name-and-type"/>
        <xs:element ref="param-type"/>
      </xs:choice>
      <xs:element ref="param-value"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="init-param" type="init-param"/>

  <!--
  The param-name element specifies the name of the initialization parameter.

  When param-name is specified, if the class being constructed and configured
  implements the IXmlConfigurable interface, then a series of init-param
  elements can be transposed in order to build a configuration XML with which
  to configure the constructed object. For example, consider the following
  init-params element:

      <init-params>
      <init-param>
        <param-name>shape</param-name>
        <param-value>circle</param-value>
      </init-param>
      <init-param>
        <param-name>color</param-name>
        <param-value>blue</param-value>
      </init-param>
      </init-params>

  If transposed, the result would be:

      <some-arbitrary-element-name>
      <shape>circle</shape>
      <color>blue</color>
      </some-arbitrary-element-name>

  Used in: init-param
  -->
  <xs:element name="param-name" type="xs:string"/>

  <!--
  The param-type element specifies the .NET type of an initialization parameter.

  Supported types include:
    - string  - indicates that the value is a System.String
    - bool    - indicates that the value is a System.Boolean
    - int     - indicates that the value is a System.Int32
    - long    - indicates that the value is a System.Int64
    - double  - indicates that the value is a System.Double
    - float   - indicates that the value is a System.Single
    - decimal - indicates that the value is a System.Decimal
    - file    - indicates that the value is a System.IO.File
    - date    - indicates that the value is a System.DateTime
    - time    - indicates that the value is a System.DateTime
    - xml     - indicates that the value is the entire init-param XmlNode

  The value is converted to the specified type, and the target constructor
  or method must have a parameter of that type in order for the
  instantiation to succeed.

  Used in: init-param
  -->
  <xs:simpleType name="param-type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="string"/>
      <xs:enumeration value="bool"/>
      <xs:enumeration value="int"/>
      <xs:enumeration value="long"/>
      <xs:enumeration value="double"/>
      <xs:enumeration value="float"/>
      <xs:enumeration value="decimal"/>
      <xs:enumeration value="file"/>
      <xs:enumeration value="date"/>
      <xs:enumeration value="time"/>
      <xs:enumeration value="xml"/>
      <xs:enumeration value="{scheme-ref}"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:element name="param-type" type="param-type"/>

  <!--
  The param-value element specifies a value of an initialization parameter.

  The value is in a format specific to the type of the parameter.

  Used in: init-param
  -->
  <xs:element name="param-value" type="xs:string"/>
  
  <!--
  The coherence-nonNegativeInteger-type element specifies a value
  of a nonNegative integer.
  -->
  <xs:complexType name="coherence-nonNegativeInteger-type">
    <xs:simpleContent>
      <xs:restriction base="parameterizable-integer">
        <xs:minInclusive value="0"/>
      </xs:restriction>
    </xs:simpleContent>
  </xs:complexType>
  <xs:element name="coherence-nonNegativeInteger-type" type="coherence-nonNegativeInteger-type"/>

  <!--
  The coherence-positiveInteger-type element specifies a value
  of a positive integer.
  -->
  <xs:complexType name="coherence-positiveInteger-type">
    <xs:simpleContent>
      <xs:restriction base="parameterizable-integer">
        <xs:minExclusive value="0"/>
      </xs:restriction>
    </xs:simpleContent>
  </xs:complexType>
  <xs:element name="coherence-positiveInteger-type" type="coherence-positiveInteger-type"/>

  <!--
  The caching-schemes element contains the definitions of all the available
  caching schemes.  Caching schemes can be defined from scratch or configured
  to use other caching schemes and override some of the characteristics of the
  schemes they use.  Specifying scheme-name allows for other schemes to refer
  to a scheme by its unique name.  Specifying scheme-ref allows for the scheme
  to inherit all the characteristics defined in the base scheme whose
  scheme-name is referred to by scheme-ref element, overriding any subset of
  its settings.

  Used in: cache-config
  -->
  <xs:complexType name="caching-schemes">
    <xs:choice maxOccurs="unbounded">
      <xs:element ref="class-scheme"/>
      <xs:element ref="local-scheme"/>
      <xs:element ref="near-scheme"/>
      <xs:element ref="remote-cache-scheme"/>
      <xs:element ref="remote-invocation-scheme"/>
    </xs:choice>
  </xs:complexType>
  <xs:element name="caching-schemes" type="caching-schemes"/>

  <!--
  The remote-cache-scheme element contains the configuration info necessary to
  use a clustered cache from outside the cluster.

  Used in: caching-scheme, cachestore-scheme, back-scheme
  -->
  <xs:complexType name="remote-cache-scheme">
    <xs:sequence>
      <xs:element ref="scheme-name" minOccurs="0"/>
      <xs:element ref="scheme-ref" minOccurs="0"/>
      <xs:element ref="service-name" minOccurs="0"/>
      <xs:element ref="proxy-service-name" minOccurs="0"/>
      <xs:element ref="operation-bundling" minOccurs="0"/>
      <xs:element ref="initiator-config" minOccurs="0"/>
      <xs:element ref="defer-key-association-check" minOccurs="0" />
      <xs:element ref="listener" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="remote-cache-scheme" type="remote-cache-scheme"/>

  <!--
  The scheme-ref element contains the scheme name of the scheme whose
  congifuration should be used as overridable base.

  Used in: local-scheme, near-scheme, remote-cache-scheme,
       remote-invocation-scheme
  -->
  <xs:element name="scheme-ref" type="parameterizable-string"/>

  <!--
  The service-name element contains the service name configuration info.

  Used in: remote-cache-scheme, local-scheme
  -->
  <xs:element name="service-name" type="parameterizable-string"/>

  <!--
  The operation-bundling element specifies the configuration info
  for a particular bundling strategy.

  Bundling is a process of coalescing multiple individual operations
  into "bundles". It could be beneficial when (1) there is a continuous
  stream of operations on multiple threads in parallel; (2) individual
  operations have relatively high latency (network or
  database-related); and (3) there are functionally analogous [bulk]
  operations that take a collection of arguments instead of a single
  one without causing the latency to grow linearly (as a function of
  the collection size).

  Note: As with any bundling algorithm, there is a natural trade-off
  between the resource utilization and average request latency.
  Depending on a particular application usage pattern, enabling this
  feature may either help or hurt the overall application performance.

  See Tangosol.Net.Cache.AbstractBundler for additional implementation
  details.

  Used in: remote-cache-scheme
  -->
  <xs:complexType name="operation-bundling">
    <xs:sequence>
      <xs:element ref="bundle-config" maxOccurs="unbounded" />
      <xs:any namespace="##other" processContents="lax"
          minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>
  <xs:element name="operation-bundling" type="operation-bundling"/>
  
  <xs:simpleType name="operation-name-enum-type">
    <xs:restriction base="xs:normalizedString">
      <xs:enumeration value="all" />
      <xs:enumeration value="get" />
      <xs:enumeration value="insert" />
      <xs:enumeration value="remove" />
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="operation-name-type">
    <xs:simpleContent>
      <xs:extension base="operation-name-enum-type">
        <xs:attribute name="system-property" type="xs:normalizedString" use="optional" />
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <!--
  The operation-name element specifies the operation name for which calls
  performed concurrently on multiple threads will be "bundled" into a
  functionally analogous [bulk] operation that takes a collection of
  arguments instead of a single one.

  Valid values depend on the bundle configuration context.For the 
  distributed-scheme and remote-cache-scheme the valid operations are
  "get", "insert" and "remove". In all cases there is a pseudo 
  operation "all", referring to all valid operations.

  Default value is "all".

  Used in: bundle-config
  -->
  <xs:element name="operation-name" type="operation-name-type">
  </xs:element>

  <!--
  The preferred-size element specifies the bundle size threshold. When a 
  bundle size reaches this value, the corresponding "bulk" operation will
  be invoked immediately. This value is measured in context-specific units.

  Valid values are zero (disabled bundling) or positive values.

  Default value is zero.

  Used in: bundle-config
  -->
  <xs:element name="preferred-size" type="coherence-nonNegativeInteger-type">
  </xs:element>

  <!--
  The delay-millis element specifies the maximum amount of time in 
  milliseconds that individual execution requests are allowed to be 
  deferred for a purpose of "bundling" them together and passing into
  a corresponding bulk operation. If the preferred-size threshold is 
  reached before the specified delay, the bundle is processed immediately.

  Valid values are positive numbers.

  Default value is 1.

  Used in: bundle-config
  -->
  <xs:element name="delay-millis" type="coherence-positiveInteger-type">
  </xs:element>

  <!--
  The thread-threshold element specifies the minimum number of threads that
  must be concurrently executing individual (non-bundled) requests for the
  bundler to switch from a pass-through to a bundling mode.

  Valid values are positive numbers.

  Default value is 4.

  Used in: bundle-config
  -->
  <xs:element name="thread-threshold" type="coherence-positiveInteger-type">
  </xs:element>

  <!--
  The auto-adjust element specifies whether or not the auto adjustment of 
  the preferred-size value (based on the run-time statistics) is allowed.

  Valid values are "true" or "false".

  Default value is "false".

  Used in: bundle-config
  -->
  <xs:element name="auto-adjust" type="parameterizable-boolean">
  </xs:element>

  <!--
  The bundle-config element specifies the bundling strategy configuration
  for one or more bundle-able operations.

  Used in: operation-bundling
  -->
  <xs:complexType name="bundle-config">
    <xs:sequence>
      <xs:element ref="operation-name" minOccurs="0" />
      <xs:element ref="preferred-size" minOccurs="0" />
      <xs:element ref="delay-millis" minOccurs="0" />
      <xs:element ref="thread-threshold" minOccurs="0" />
      <xs:element ref="auto-adjust" minOccurs="0" />
      <xs:any namespace="##other" processContents="lax"
          minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:anyAttribute namespace="##other" processContents="lax"/>
  </xs:complexType>
  <xs:element name="bundle-config" type="bundle-config"/>

  <!--
  The proxy-service-name element contains the service name of the
  remote proxy service to which this remote service will connect.
  This name must match the &lt;service name&gt; element value of
  the remote proxy service.

  Used in: remote-cache-scheme, remote-invocation-scheme
  -->
  <xs:element name="proxy-service-name" type="parameterizable-string"/>

  <!--
  The initiator-config element specifies the configuration info for a
  protocol-specific connection initiator. A connection initiator allows a
  client to connect to a cluster (via a connection acceptor) and use the
  clustered services offered by the cluster without having to first join the
  cluster.

  Used in: remote-cache-scheme, remote-invocation-scheme
  -->
  <xs:complexType name="initiator-config">
    <xs:sequence>
      <xs:choice>
        <xs:element ref="tcp-initiator"/>
      </xs:choice>
      <xs:element ref="incoming-message-handler" minOccurs="0"/>
      <xs:element ref="outgoing-message-handler" minOccurs="0"/>
      <xs:element ref="use-filters" minOccurs="0"/>
      <xs:element ref="serializer" minOccurs="0"/>
      <xs:element ref="connect-timeout" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="initiator-config" type="initiator-config"/>

  <!---
  Element used to indicate a unsucure default network stream.
  
  Used in: stream-provider
  -->
  <xs:element name="system"/>

  <!--
  The certificate element specifies configuration for a X509Certificate.
  
  Used in: local-certificates
  -->
  <xs:complexType name="certificate">
    <xs:sequence> 
      <xs:element name="url"/>
      <xs:element name="password"/>
      <xs:element name="flags" minOccurs="0">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="DefaultKeySet"/>
            <xs:enumeration value="DefaultKeySet"/>
            <xs:enumeration value="MachineKeySet"/>
            <xs:enumeration value="Exportable"/>
            <xs:enumeration value="UserProtected"/>
            <xs:enumeration value="PersistKeySet"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="certificate" type="certificate"/>
  
  <!--
  The local-certificates element is used to specify a single or a group of 
  certificates used to identify the client when using a secure connection.
  
  Used in: ssl
  -->
  <xs:complexType name="local-certificates">
    <xs:sequence>
      <xs:element ref="certificate" minOccurs="1" maxOccurs="unbounded"/>
      <xs:element ref="selector" minOccurs="0" maxOccurs="1"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="local-certificates" type="local-certificates"/>

  <!--
  The delegate element is used to configure and instantiate a delegate which is 
  used as a callback.
  
  Used in: remote-certificate-validator, selector.
  -->
  <xs:complexType name="delegate">
    <xs:sequence>
      <xs:element name="type" minOccurs="0" maxOccurs="1">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="instance"/>
            <xs:enumeration value="static"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element ref="class-name" minOccurs="1"/>
      <xs:element name="method-name" minOccurs="1"/>
    </xs:sequence>    
  </xs:complexType>
  <xs:element name="delegate" type="delegate"/>

  <!--
  The remote-certificate-validator element is used to override the default
  RemoteCertificateValidator callback used when establishing a secure connection.
  
  Used in: ssl
  -->
  <xs:complexType name="remote-certificate-validator">
    <xs:sequence>
      <xs:element ref="delegate"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="remote-certificate-validator" type="remote-certificate-validator"/>

  <!--
  The selector element is used to override the default LocalCertificateSelector 
  callback used when identifying the  client for a secure connection.
  
  Used in: local-certificates.
  -->
  <xs:complexType name="local-certificate-selector">
    <xs:sequence>
      <xs:element ref="delegate"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="selector" type="local-certificate-selector"/>

  <!--
  The ssl element contains the configuration info for a stream
  provider that produces streams which utilize SSL.
  
  Used in: stream-provider.
  -->
  <xs:complexType name="ssl">
    <xs:sequence>
      <xs:element name="protocol" minOccurs="0">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="None"/>
            <xs:enumeration value="Ssl2"/>
            <xs:enumeration value="Ssl3"/>
            <xs:enumeration value="Tls"/>
            <xs:enumeration value="Default"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
        
      <xs:element ref="local-certificates" minOccurs="0" maxOccurs="1"/>
      <xs:element ref="remote-certificate-validator" minOccurs="0" maxOccurs="1"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="ssl" type="ssl"/>
  
  <!--
  The stream-provider specifies the type of stream used when communicating via 
  TCP/IP.
  
  Used in: tcp-initiator.
  -->
  <xs:complexType name="stream-provider">
    <xs:sequence>
      <xs:choice>
        <xs:element ref="system"/>
        <xs:element ref="ssl"/>
      </xs:choice>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="stream-provider" type="stream-provider"/>
  
  <!--
  The tcp-initiator element specifies the configuration info for a connection
  initiator that enables clients to connect to a remote cluster via TCP/IP.

  Used in: initiator-config
  -->
  <xs:complexType name="tcp-initiator">
    <xs:sequence>
      <xs:element ref="stream-provider" minOccurs="0"/>
      <xs:element ref="local-address" minOccurs="0"/>
      <xs:choice>
        <xs:element ref="name-service-addresses"/>
        <xs:element ref="remote-addresses"/>
      </xs:choice>
      <xs:element ref="keep-alive-enabled" minOccurs="0"/>
      <xs:element ref="tcp-delay-enabled" minOccurs="0"/>
      <xs:element ref="receive-buffer-size" minOccurs="0"/>
      <xs:element ref="send-buffer-size" minOccurs="0"/>
      <xs:element ref="linger-timeout" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="tcp-initiator" type="tcp-initiator"/>

  <!--
  The incoming-message-handler specifies the configuration info used to
  regulate client-to-cluster connection resource usage. Connection initiators
  use this information proactively detect and release connections that use
  excessive resources. 

  Used in: initiator-config
  -->
  <xs:complexType name="incoming-message-handler">
    <xs:sequence>
      <xs:element ref="max-message-size" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="incoming-message-handler" type="incoming-message-handler"/>

  <!--
  The outgoing-message-handler element specifies the configuration info used to
  detect dropped client-to-cluster connections. For connection initiators and
  acceptors that use connectionless protocols (e.g. JMS), this information is
  necessary to proactively detect and release resources allocated to dropped
  connections. Connection-oriented initators and acceptors can also use this
  information as an additional mechanism to detect dropped connections.

  Used in: initiator-config
  -->
  <xs:complexType name="outgoing-message-handler">
    <xs:sequence>
      <xs:element ref="heartbeat-interval" minOccurs="0"/>
      <xs:element ref="heartbeat-timeout" minOccurs="0"/>
      <xs:element ref="max-message-size" minOccurs="0"/>
      <xs:element ref="request-timeout" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="outgoing-message-handler" type="outgoing-message-handler"/>

  <!--
  The use-filters element contains the list of filter names to be used
  by a connection initiator.

  Used in: initiator-config
  -->
  <xs:complexType name="use-filters">
    <xs:sequence>
      <xs:element ref="filter-name" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="use-filters" type="use-filters"/>

  <!--
  The filter-name element contains the canonical name of the filter as specified
  in the operational configuration file.

  Used in: use-filters
  -->
  <xs:element name="filter-name" type="parameterizable-string"/>

  <!--
  The connect-timeout element specifies the maximum amount of time to wait
  while establishing a connection with a connection acceptor.

  The value of this element must be in the following format:

    [\d]+[[.][\d]+]?[MS|ms|S|s|M|m|H|h|D|d]?

  where the first non-digits (from left to right) indicate the unit of time
  duration:

    -MS or ms (milliseconds)
    -S  or s  (seconds)
    -M  or m  (minutes)
    -H  or h  (hours)
    -D  or d  (days)

  If the value does not contain a unit, a unit of milliseconds is assumed.

  Default value is an infinite timeout.

  Used in: initiator-config
  -->
  <xs:element name="connect-timeout" type="time"/>

  <!--
  The linger-timeout element enables SO_LINGER on a TCP/IP socket with the
  specified linger time.

  The value of this element must be in the following format:

    [\d]+[[.][\d]+]?[MS|ms|S|s|M|m|H|h|D|d]?

  where the first non-digits (from left to right) indicate the unit of time
  duration:

    -MS or ms (milliseconds)
    -S  or s  (seconds)
    -M  or m  (minutes)
    -H  or h  (hours)
    -D  or d  (days)

  If the value does not contain a unit, a unit of milliseconds is assumed.

  Linger is disabled by default.

  Used in: tcp-initiator
  -->
  <xs:element name="linger-timeout" type="time"/>

  <!--
  The request-timeout specifies the maximum amount of time a client will wait
  for a response before abandoning the original request.

  The value of this element must be in the following format:

    [\d]+[[.][\d]+]?[MS|ms|S|s|M|m|H|h|D|d]?

  where the first non-digits (from left to right) indicate the unit of time
  duration:

    -MS or ms (milliseconds)
    -S  or s  (seconds)
    -M  or m  (minutes)
    -H  or h  (hours)
    -D  or d  (days)

  If the value does not contain a unit, a unit of milliseconds is assumed.

  Default value is 30 seconds (30s).  Use "0s" to specify an infinite timeout.

  Used in: outgoing-message-handler
  -->
  <xs:element name="request-timeout" type="time"/>

  <!--
  The heartbeat-interval element specifies the interval between ping requests.
  A ping request is used to ensure the integrity of a connection.

  The value of this element must be in the following format:

    [\d]+[[.][\d]+]?[MS|ms|S|s|M|m|H|h|D|d]?

  where the first non-digits (from left to right) indicate the unit of time
  duration:

    -MS or ms (milliseconds)
    -S  or s  (seconds)
    -M  or m  (minutes)
    -H  or h  (hours)
    -D  or d  (days)

  If the value does not contain a unit, a unit of milliseconds is assumed.

  Ping requests are disabled by default.

  Used in: outgoing-message-handler
  -->
  <xs:element name="heartbeat-interval" type="time"/>

  <!--
  The heartbeat-timeout element specifies the maximum amount of time to wait
  for a response to a ping request before declaring the underlying connection
  unusable.

  The value of this element must be in the following format:

    [\d]+[[.][\d]+]?[MS|ms|S|s|M|m|H|h|D|d]?

  where the first non-digits (from left to right) indicate the unit of time
  duration:

    -MS or ms (milliseconds)
    -S  or s  (seconds)
    -M  or m  (minutes)
    -H  or h  (hours)
    -D  or d  (days)

  If the value does not contain a unit, a unit of milliseconds is assumed.

  Ping requests are disabled by default.

  Used in: outgoing-message-handler
  -->
  <xs:element name="heartbeat-timeout" type="time"/>

  <!--
   The value of the max-message-size element is used to limit the size of
   messages being sent over Coherence*Extend connections.

  The value of this element must be in the following format:

    [\d]+[[.][\d]+]?[K|k|M|m|G|g|T|t]?[B|b]?

  where the first non-digit (from left to right) indicates the factor with
  which the preceding decimal value should be multiplied:

    -K  or k  (kilo, 2^10)
    -M  or m  (mega, 2^20)
    -G  or g  (giga, 2^30)
    -T  or t  (tera, 2^40)

  If the value does not contain a factor, a factor of one is assumed.

  Default value of 0 means no limit.

  Used in: incoming-message-handler, outgoing-message-handler
  -->
  <xs:element name="max-message-size" type="memory-size"/>

  <!--
  The serializer element contains the class configuration info for 
  a Tangosol.IO.ISerializer implementation.

  In addition to defining a serializer, it is also acceptable and in
  fact preferred to provide the name of a selector from the selectors
  element of the operational configuration.

  Note: The ability to directly define a custom serializer within this
  element is deprecated as of Coherence 12.1.2. Starting with Coherence 
  12.1.2 either named serializers should be used, or the custom definition 
  should be moved into an inner instance element.

  Used in: initiator-config
  -->
  <xs:complexType name="serializer" mixed="true">
    <xs:sequence>
      <xs:choice minOccurs="0">
        <xs:element ref="instance"/>
        <xs:group ref="instance"/>
      </xs:choice>
      <xs:any namespace="##other" processContents="lax"
              minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="serializer" type="serializer"/>

  <!--
  The instance element contains class configuration info.

  In most cases, the instance element is used to specify the name of the
  class to instantiate directly. For example:

  <instance>
    <class-name>Tangosol.Net.Cache.Support.SynchronizedCache</class-name>
  </instance>

  It is also possible to specify a static factory method to call instead.
  To specify the factory approach, provide both the class-factory-name and
  method-name elements corresponding to the static factory method that returns
  the new object instance.

  Used in: serializer, address-provider
  -->
  <xs:group name="instance">
    <xs:sequence>
      <xs:choice>
        <xs:element ref="class-name"/>
        <xs:sequence>
          <xs:element ref="class-factory-name"/>
          <xs:element ref="method-name"/>
        </xs:sequence>
      </xs:choice>
      <xs:element ref="init-params" minOccurs="0"/>
    </xs:sequence>
  </xs:group>

  <xs:complexType name="instance">
    <xs:group ref="instance"/>
  </xs:complexType>
  <xs:element name="instance" type="instance"/>
  
  <!--
  The class-name element specifies a fully specified name of a .NET class.

  Note: in all schemes except the class-scheme, the specifed class must:
    a) extend the corresponding scheme implementation class
    b) use identical set of parameters for its constructors

  Used in: class-scheme, local-sheme, near-scheme, serializer
  -->
  <xs:element name="class-name" type="parameterizable-string"/>

  <!--
  The local-address specifies the local address (IP or DNS name) and port that
  a TCP/IP socket will be bound to.

  Used in: tcp-initiator
  -->
  <xs:complexType name="local-address">
    <xs:sequence>
      <xs:element ref="address" minOccurs="0"/>
      <xs:element ref="port" minOccurs="0"/>
      <xs:element name="address-family" minOccurs="0">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="InterNetwork"/>
            <xs:enumeration value="InterNetworkV6"/>
            <xs:enumeration value="Unspecified"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="local-address" type="local-address"/>
  
  <!--
  The remote-addresses element contains the address (IP or DNS name) and
  port of one or more TCP/IP connection acceptor. The TCP/IP connection
  initiator uses this information to establish a TCP/IP connection with a
  remote cluster. The TCP/IP connection initiator will attempt to connect to
  the addresses in a random order, until either the list is exhausted or a
  TCP/IP connection is established.

  Used in: tcp-initiator
  -->
  <xs:complexType name="remote-addresses">
    <xs:sequence>
      <xs:choice>
        <xs:element ref="socket-address" maxOccurs="unbounded"/>
        <xs:element ref="address-provider"/>
      </xs:choice>
      <xs:any namespace="##other" processContents="lax"
              minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="remote-addresses" type="remote-addresses"/>

  <!--
  The name-service-addresses element contains the address (IP or DNS name) and
  port of one or more TCP/IP connection acceptor. The TCP/IP connection
  initiator uses this information to establish a TCP/IP connection with a
  remote cluster. The TCP/IP connection initiator will attempt to connect to
  the addresses in a random order, until either the list is exhausted or a
  TCP/IP connection is established.

  Used in: tcp-initiator
  -->
  <xs:element name="name-service-addresses" type="remote-addresses"/>
  
  <!--
  The value of the keep-alive-enabled element indicates whether or not keep
  alive (SO_KEEPALIVE) is enabled on a TCP/IP socket.

  Valid values are true and false.

  Keep alive is enabled by default.

  Used in: tcp-initiator
  -->
  <xs:element name="keep-alive-enabled" type="parameterizable-boolean"/>

  <!--
  The value of the tcp-delay-enabled element indicates whether or not TCP
  delay (Nagle's algorithm) is enabled on a TCP/IP socket.

  Valid values are true and false.

  TCP delay is disabled by default.

  Used in: tcp-initiator
  -->
  <xs:element name="tcp-delay-enabled" type="parameterizable-boolean"/>

  <!--
  The value of the receive-buffer-size element is used to configure the size of
  the underlying TCP/IP socket network receive buffer.

  Increasing the receive buffer size can increase the performance of network
  I/O for high-volume connections, while decreasing it can help reduce the
  backlog of incoming data.

  The value of this element must be in the following format:

    [\d]+[[.][\d]+]?[K|k|M|m|G|g|T|t]?[B|b]?

  where the first non-digit (from left to right) indicates the factor with
  which the preceding decimal value should be multiplied:

    -K  or k  (kilo, 2^10)
    -M  or m  (mega, 2^20)
    -G  or g  (giga, 2^30)
    -T  or t  (tera, 2^40)

  If the value does not contain a factor, a factor of one is assumed.

  Default value is O/S dependent.

  Used in: tcp-initiator
  -->
  <xs:element name="receive-buffer-size" type="memory-size"/>

  <!--
  The value of the send-buffer-size element is used to configure the size of
  the underlying TCP/IP socket network send buffer.

  The value of this element must be in the following format:

    [\d]+[[.][\d]+]?[K|k|M|m|G|g|T|t]?[B|b]?

  where the first non-digit (from left to right) indicates the factor with
  which the preceding decimal value should be multiplied:

    -K  or k  (kilo, 2^10)
    -M  or m  (mega, 2^20)
    -G  or g  (giga, 2^30)
    -T  or t  (tera, 2^40)

  If the value does not contain a factor, a factor of one is assumed.

  Default value is O/S dependent.

  Used in: tcp-initiator
  -->
  <xs:element name="send-buffer-size" type="memory-size"/>

  <!--
  The socket-address element specifies the address (IP or DNS name) and port
  of a TCP/IP connection acceptor.

  Used in: remote-addresses, address-provider
  -->
  <xs:complexType name="socket-address">
    <xs:sequence>
      <xs:element ref="address"/>
      <xs:element ref="port"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="socket-address" type="socket-address"/>

  <!--
  The address-provider element contains the configuration info for an address
  factory that implements the Tangosol.Net.IAddressProvider interface.

  Used in: remote-addresses
  -->
  <xs:complexType name="address-provider" mixed="true">
    <xs:choice>
      <xs:choice>
        <xs:element ref="instance"/>
        <xs:group ref="instance"/>
      </xs:choice>
      <xs:element ref="socket-address" minOccurs="0" maxOccurs="unbounded"/>
    </xs:choice>
  </xs:complexType>
  <xs:element name="address-provider" type="address-provider"/>

  <!--
  The address element specifies the IP address used by a socket.

  Used in: local-address, socket-address
  -->
  <xs:element name="address" type="parameterizable-string"/>

  <!--
  The port element specifies a port used by a socket.

  Valid values are from 1 to 65535.

  Used in: local-address, socket-address
  -->
  <xs:complexType name="port">
    <xs:simpleContent>
      <xs:restriction base="parameterizable-integer">
        <xs:minInclusive value="0"/>
        <xs:maxInclusive value="65535"/>
      </xs:restriction>
    </xs:simpleContent>
  </xs:complexType>
  <xs:element name="port" type="port"/>

  <!--
  The near-scheme element contains the near caching scheme configuration info.

  This scheme is implemented by the Tangosol.Net.Cache.NearCache class
  (unless overridden by the class-name element).

  Used in: caching-schemes
  -->
  <xs:complexType name="near-scheme">
    <xs:sequence>
      <xs:element ref="scheme-name" minOccurs="0"/>
      <xs:element ref="scheme-ref" minOccurs="0"/>
      <xs:element ref="class-name" minOccurs="0"/>
      <xs:element ref="init-params" minOccurs="0"/>
      <xs:element ref="front-scheme" minOccurs="0"/>
      <xs:element ref="back-scheme" minOccurs="0"/>
      <xs:element ref="invalidation-strategy" minOccurs="0"/>
      <xs:element ref="listener" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="near-scheme" type="near-scheme"/>

  <!--
  The front-scheme element contains the front tier cache configuration info.

  Used in: near-scheme
  -->
  <xs:complexType name="front-scheme">
    <xs:choice>
      <xs:element ref="local-scheme"/>
      <xs:element ref="class-scheme"/>
    </xs:choice>
  </xs:complexType>
  <xs:element name="front-scheme" type="front-scheme"/>

  <!--
  The back-scheme element contains the back tier cache configuration info.

  Used in: near-scheme
  -->
  <xs:complexType name="back-scheme">
    <xs:choice>
      <xs:element ref="local-scheme"/>
      <xs:element ref="remote-cache-scheme"/>
      <xs:element ref="class-scheme"/>
    </xs:choice>
  </xs:complexType>
  <xs:element name="back-scheme" type="back-scheme"/>

  <!--
  The invalidation-strategy element specifies the strategy used for a front
  cache invalidation.

  Please see the API Doc for the Tangosol.Net.Cache.NearCache class.

  Valid values are "none", "present", "logical", "all", "auto".

  Default value is "auto".

  Used in: near-scheme
  -->
  <xs:complexType name="invalidation-strategy">
    <xs:simpleContent>
      <xs:restriction base="parameterizable-string">
        <xs:enumeration value="none"/>
        <xs:enumeration value="present"/>
        <xs:enumeration value="logical"/>
        <xs:enumeration value="all"/>
        <xs:enumeration value="auto"/>
      </xs:restriction>
    </xs:simpleContent>
  </xs:complexType>
  <xs:element name="invalidation-strategy" type="invalidation-strategy"/>

  <!--
  The local-scheme element contains the local caching scheme configuration
  info. It should be used to specify and configure local caches or backing
  maps with various eviction policies.

  This scheme is implemented by the Tangosol.Net.Cache.LocalCache class
  (unless overridden by the class-name element).

  Used in: caching-schemes
  -->
  <xs:complexType name="local-scheme">
    <xs:sequence>
      <xs:element ref="scheme-name" minOccurs="0"/>
      <xs:element ref="scheme-ref" minOccurs="0"/>
      <xs:element ref="class-name" minOccurs="0"/>
      <xs:element ref="service-name" minOccurs="0"/>
      <xs:element ref="init-params" minOccurs="0"/>
      <xs:element ref="eviction-policy" minOccurs="0"/>
      <xs:element ref="high-units" minOccurs="0"/>
      <xs:element ref="low-units" minOccurs="0"/>
      <xs:element ref="unit-calculator" minOccurs="0"/>
      <xs:element ref="expiry-delay" minOccurs="0"/>
      <xs:element ref="flush-delay" minOccurs="0"/>
      <xs:element ref="cachestore-scheme" minOccurs="0"/>
      <xs:element ref="pre-load" minOccurs="0"/>
      <xs:element ref="listener" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="local-scheme" type="local-scheme"/>

  <!--
  The eviction-policy element contains the eviction policy configuration info.

  Valid values are "LRU", "LFU" and "HYBRID".

  The HYBRID eviction policy is a combination of LRU (Least Recently Used) and
  LFU (Least Frequently Used).  It's a strategy based on entries "priority".
  The higher the priority, the higher is the probability of the entry being pruned
  out of the cache.  The priority is calculated as a sum of weighted logarithmic
  measures of two different factors: the "recentness" and the "frequency".  The
  algorithm is structured in such a way that if cache entries are used very rarely,
  the eviction strategy becomes equivalent to that of LRU and if all entries are
  used quite often then the eviction strategy becomes equivalent to that of LFU.

  Alternatively, this element may contain a class-scheme element that specifies a
  custom eviction policy class. The specified class must implement the
  LocalCache.IEvictionPolicy interface.
  
  Used in: local-scheme
  -->
  <xs:complexType name="eviction-policy" mixed="true">
    <xs:choice minOccurs="0">
      <xs:element ref='class-scheme'/>
    </xs:choice>
    <xs:attribute name="param-name" type="xs:string" use="optional"/>
  </xs:complexType>
  <xs:element name="eviction-policy" type="eviction-policy"/>

  <!--
  The high-units element contains the maximum number of cache entries that a
  cache will hold before pruning occurs.

  Valid values are positive integers and zero.

  Used in: local-scheme
  -->
  <xs:complexType name="units">
    <xs:simpleContent>
      <xs:restriction base="parameterizable-integer">
        <xs:minInclusive value="0"/>
      </xs:restriction>
    </xs:simpleContent>
  </xs:complexType>
  <xs:element name="high-units" type="units"/>

  <!--
  The low-units element contains the number of cache entries to which the cache
  will be pruned when cache pruning occurs.

  Valid values are positive integers and zero.

  Used in: local-scheme
  -->
  <xs:element name="low-units" type="units"/>

  <!--
  The unit-calculator element contains the unit calculator configuration info.

  Valid value is "FIXED".

  A unit calculator is used to determine the cost (in "units") of a given
  object. The FIXED unit calculator assigns an equal weight of 1 to all cached
  objects.

  Alternatively, this element may contain a class-scheme element that specifies a
  custom unit calculator class. The specified class must implement the
  LocalCache.IUnitCalculator interface.
  
  Used in: local-scheme
  -->
  <xs:complexType name="unit-calculator" mixed="true">
    <xs:choice minOccurs="0">
      <xs:element ref='class-scheme'/>
    </xs:choice>
    <xs:attribute name="param-name" type="xs:string" use="optional"/>
  </xs:complexType>
  <xs:element name="unit-calculator" type="unit-calculator"/>

  <!--
  The expiry-delay element specifies the amount of time from last update that
  entries will be kept by the cache before being discarded.

  The value of this element must be in the following format:

  [\d]+[[.][\d]+]?[MS|ms|S|s|M|m|H|h|D|d]?

  where the first non-digits (from left to right) indicate the unit of time
  duration:

  -MS or ms (milliseconds)
  -S  or s  (seconds)
  -M  or m  (minutes)
  -H  or h  (hours)
  -D  or d  (days)

  If the value does not contain a unit, a unit of seconds is assumed.

  Used in: local-scheme, external-scheme, overflow-scheme
  -->
  <xs:element name="expiry-delay" type="time"/>

  <!--
  The flush-delay element specifies the amount of time between cache flushes.

  The value of this element must be in the following format:

  [\d]+[[.][\d]+]?[MS|ms|S|s|M|m|H|h|D|d]?

  where the first non-digits (from left to right) indicate the unit of time
  duration:

  -MS or ms (milliseconds)
  -S  or s  (seconds)
  -M  or m  (minutes)
  -H  or h  (hours)
  -D  or d  (days)

  If the value does not contain a unit, a unit of seconds is assumed.

  If expiry is enabled, the default flush-delay is 1m, otherwise a default of zero
  is used and automatic flushes are disabled

  Used in: local-scheme
  -->
  <xs:element name="flush-delay" type="time"/>

  <!--
  The cachestore-scheme element contains the cachestore configuration info.

  Implementation classes should implement one of two interfaces:
  Tangosol.Net.Cache.ICacheLoader or Tangosol.Net.Cache.ICacheStore.

  Used in: local-scheme
  -->
  <xs:complexType name="cachestore-scheme">
    <xs:sequence>
      <xs:element ref="scheme-name" minOccurs="0"/>
      <xs:element ref="scheme-ref" minOccurs="0"/>
      <xs:choice minOccurs="0">
        <xs:element ref="class-scheme"/>
        <xs:element ref="remote-cache-scheme"/>
      </xs:choice>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="cachestore-scheme" type="cachestore-scheme"/>

  <!--
  The pre-load element specifies whether a cache will pre-load data from its
  CacheLoader (or CacheStore) object.

  Valid values are true and false.

  Default value is false.

  Used in: local-scheme
  -->
  <xs:element name="pre-load" type="parameterizable-boolean"/>

  <!--
  The listener element contains the listener configuration info.
  
  Implementation classes must implement the Tangosol.Net.Cache.ICacheListener
  interface.

  Used in: local-scheme, near-scheme
  -->
  <xs:complexType name="listener">
    <xs:all>
      <xs:element ref="class-scheme"/>
    </xs:all>
  </xs:complexType>
  <xs:element name="listener" type="listener"/>

  <!--
  The class-scheme element contains class configuration info.

  In most cases, the class-name element is used to specify the name of the
  class to instantiate directly. For example:

  <class-scheme>
    <class-name>Tangosol.Net.Cache.Support.SynchronizedCache</class-name>
  </class-scheme>

  It is also possible to specify a static factory method to call instead.
  To specify the factory approach, provide both the class-factory-name and
  method-name elements corresponding to the static factory method that returns
  the new object instance.

  Used in: caching-schemes
  -->
  <xs:complexType name="class-scheme">
    <xs:sequence>
      <xs:element ref="scheme-name" minOccurs="0"/>
      <xs:element ref="scheme-ref" minOccurs="0"/>
      <xs:choice>
        <xs:element ref="class-name"/>
        <xs:sequence>
          <xs:element ref="class-factory-name"/>
          <xs:element ref="method-name"/>
        </xs:sequence>
      </xs:choice>
      <xs:element ref="init-params" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="class-scheme" type="class-scheme"/>

  <!--
  The class-factory-name element specifies a fully specified name of a .NET
  class that will be used by the factory approach for the class-scheme.

  Used in: class-scheme
  -->
  <xs:element name="class-factory-name" type="parameterizable-string"/>

  <!--
  The method-name element specifies a fully specified name of a static factory
  method that will be used by the factory approach for the class-scheme.

  Used in: class-scheme
  -->
  <xs:element name="method-name" type="parameterizable-string"/>

  <!--
  The defer-key-association-check element specifies whether a
  key should be checked for KeyAssociation by the extend client
  (false) or deferred until the key is received by the
  PartionedService (true).

  Set the defer-key-association-check element value to true
  when the Java key class defined on the Coherence
  cluster-side should be used for KeyAssociation processing.

  Valid values are "true" or "false". Default value is false.

  Used in: remote-cache-scheme
  -->
  <xs:element name="defer-key-association-check" type="parameterizable-boolean"/>

  <!--
  Time string type. Values of elements of this type must be in the following
  format:

  [\d]+[[.][\d]+]?[MS|ms|S|s|M|m|H|h|D|d]?

  where the first non-digits (from left to right) indicate the unit of time
  duration:

  -MS or ms (milliseconds)
  -S  or s  (seconds)
  -M  or m  (minutes)
  -H  or h  (hours)
  -D  or d  (days)

  If the value does not contain a unit, a unit of seconds is assumed.
  -->
  <xs:complexType name="time">
    <xs:simpleContent>
      <xs:restriction base="parameterizable-string">
        <xs:pattern value="(\d)+(\.\d+)?(MS|ms|S|s|M|m|H|h|D|d)?"/>
      </xs:restriction>
    </xs:simpleContent>
  </xs:complexType>

  <!--
  Memory size string type. Values of elements of this type must be in the
  following format:

    [\d]+[[.][\d]+]?[K|k|M|m|G|g|T|t]?[B|b]?

  where the first non-digit (from left to right) indicates the factor with
  which the preceding decimal value should be multiplied:

    -K  or k  (kilo, 2^10)
    -M  or m  (mega, 2^20)
    -G  or g  (giga, 2^30)
    -T  or t  (tera, 2^40)

  If the value does not contain a factor, a factor of one is assumed.
  -->
  <xs:complexType name="memory-size">
    <xs:simpleContent>
      <xs:restriction base="parameterizable-string">
        <xs:pattern value="(\d)+(\.\d+)?(K|k|M|m|G|g|T|t)?(B|b)?"/>
      </xs:restriction>
    </xs:simpleContent>
  </xs:complexType>

  <!--
  The remote-invocation-scheme element contains the configuration info
  necessary to execute tasks within the context of a cluster without having
  to first join the cluster.

  Used in: caching-schemes
  -->
  <xs:complexType name="remote-invocation-scheme">
    <xs:sequence>
      <xs:element ref="scheme-name" minOccurs="0"/>
      <xs:element ref="scheme-ref" minOccurs="0"/>
      <xs:element ref="service-name" minOccurs="0"/>
      <xs:element ref="proxy-service-name" minOccurs="0"/>
      <xs:element ref="initiator-config" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="remote-invocation-scheme" type="remote-invocation-scheme"/>

  <!--
  The parameterizable-boolean type is an extension of the xs:boolean type that
  supports override via a parameter specified using the param-name attribute.
  -->
  <xs:complexType name="parameterizable-boolean">
    <xs:simpleContent>
      <xs:extension base="xs:boolean">
        <xs:attribute name="param-name" type="xs:string" use="optional"/>
        <xs:attribute name="system-property" type="xs:string" use="optional" />
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <!--
  The parameterizable-integer type is an extension of the xs:integer type that
  supports override via a parameter specified using the param-name attribute.
  -->
  <xs:complexType name="parameterizable-integer">
    <xs:simpleContent>
      <xs:extension base="xs:integer">
        <xs:attribute name="param-name" type="xs:string" use="optional"/>
        <xs:attribute name="system-property" type="xs:string" use="optional"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <!--
  The parameterizable-string type is an extension of the xs:string type that
  supports override via a parameter specified using the param-name attribute.
  -->
  <xs:complexType name="parameterizable-string">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="param-name" type="xs:string" use="optional"/>
        <xs:attribute name="system-property" type="xs:string" use="optional"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
</xs:schema>
